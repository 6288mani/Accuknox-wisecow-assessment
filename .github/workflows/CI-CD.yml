name: End to End CI/CD workflow for wisecow application by Accuknox Assessment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.REGISTRY_USERNAME }}/wisecow-app .

      - name: Push Docker image
        run: docker push ${{ secrets.REGISTRY_USERNAME }}/wisecow-app:latest

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          kubectl-version: 'latest'

      # Set up kubeconfig from GitHub Secrets
      - name: Set kubeconfig
        run: |
            mkdir -p $HOME/.kube
            echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

     # Verify kubectl is working
      - name: Verify kubectl
        run: kubectl version --client

      - name: Apply Kubernetes Deployment
        run: |
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml
        working-directory: ./  # Ensure you're running this from the root or correct directory

      - name: List all services for debugging
        run: kubectl get svc
        
      # Install AWS CLI
      - name: Install AWS CLI
        run: |
          sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt-get install -y unzip
          sudo ./aws/install

      # Set up AWS CLI to interact with EC2
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Replace with your region

      # Automatically get EC2 Instance ID and Elastic IP
      - name: Get EC2 Instance ID and Elastic IP
        id: get_ip
        run: |
          # Automatically retrieve the EC2 instance ID
          EC2_INSTANCE_ID=$(aws ec2 describe-instances \
            --query "Reservations[0].Instances[?Tags[?Key=='Name']|[0].Value=='YourInstanceName'].InstanceId" \
            --output text)

          # Get the Elastic IP associated with the EC2 instance
          ELASTIC_IP=$(aws ec2 describe-instances \
            --instance-ids $EC2_INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "Elastic IP for EC2 Instance ($EC2_INSTANCE_ID): $ELASTIC_IP"
          echo "ELASTIC_IP=$ELASTIC_IP" >> $GITHUB_ENV

      - name: Use Elastic IP
        run: |
          echo "Using Elastic IP: ${{ env.ELASTIC_IP }}"
          # Example: curl the service or run some other action
          curl http://${{ env.ELASTIC_IP }}:4499
